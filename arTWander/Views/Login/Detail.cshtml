@using arTWander.Models.Dtos
@model RegisterUser
@{
    Layout = "~/Views/Shared/_LoginLayout.cshtml";
}

<div class="container">
    <!-- 歡迎 starts -->
    <ul class="nav nav-tabs d-flex justify-content-center border-bottom-0 px-0" id="myTab" role="tablist">
        <div class="row w-100 justify-content-center">
            <h4>感謝您的註冊，</h4>
            <h4>請讓我們更加了解您</h4>
        </div>
    </ul>
    <!-- 歡迎 ends -->
    <div class="tab-content" id="Register">
        <!-- 初次登入設定資料 starts -->
        <div class="container p-0 w-100 rounded-lg mt-5 ">

            @*<div class="row mt-5 justify-content-center ">
            <!-- <label class="col-7 col-md-2 " for="userAvatar">頭像</label> -->
            <!-- 消除input type="file" UI的方法 https://www.wfublog.com/2017/10/input-type-file-upload-css-skill.html -->
            <label class=" col-3 col-md-1 p-0" for="Picture" role="button">
            <div id="userAvatarDiv">
            <img id="userAvatarImg" class="rounded-circle d-flex " width="100px" height="100px" src="/default.png" style="object-fit: cover;" alt="">
            <i class="fa fa-camera " aria-hidden="true"></i>
            <div id="fakeDiv"></div>
            </div>
            <input class="d-none" name="Picture" id="Picture" type="file">
            </label><br>
            </div>*@
            <div class="row mt-4 justify-content-center ">
                <label asp-for="Email" class="col-4 col-md-2"></label>
                <div class="col-6" style="padding:0px;">
                    <input id="Email" name="Email" v-model="form.Email" style="width:100%;" />
                    <span class="text-danger" style="white-space: pre-wrap;">{{error.Email}}</span>
                </div>
            </div>

            <div class="row mt-4 justify-content-center ">
                <label asp-for="Password" class="col-4 col-md-2"></label>
                <div class="col-6" style="padding:0px;">
                    <input id="Password" name="Password" v-model="form.Password" type="password" style="width:100%;" />
                    <span class="text-danger" style="white-space: pre-wrap;">{{error.Password}}</span>
                </div>
            </div>

            <div class="row mt-4 justify-content-center ">
                <label asp-for="PasswordConfirmed" class="col-4 col-md-2"></label>
                <div class="col-6" style="padding:0px;">
                    <input id="PasswordConfirmed" name="PasswordConfirmed" v-model="form.PasswordConfirmed" type="password" style="width:100%;" />
                    <span class="text-danger" style="white-space: pre-wrap;">{{error.PasswordConfirmed}}</span>
                </div>
            </div>

            <div class="row mt-4 justify-content-center ">
                <label asp-for="UserName" class="col-4 col-md-2"></label>
                <div class="col-6" style="padding:0px;">
                    <input id="UserName" name="UserName" v-model="form.UserName" type="text" style="width:100%;" />
                    <span class="text-danger" style="white-space: pre-wrap;">{{error.UserName}}</span>
                </div>
            </div>

            <div class="row mt-4 justify-content-center ">
                <label asp-for="Name" class="col-4 col-md-2"></label>
                <div class="col-6" style="padding:0px;">
                    <input id="Name" name="Name" v-model="form.Name" type="text" style="width:100%;" />
                    <span class="text-danger" style="white-space: pre-wrap;">{{error.Name}}</span>
                </div>
            </div>

            <div class="row mt-4 justify-content-center">
                <label asp-for="Birthday" class="col-4 col-md-2"></label>
                <div class="col-6" style="padding:0px;">
                    <input id="Birthday" name="Birthday" v-model="form.Birthday" type="date" style="width:100%;" />
                    <span class="text-danger" style="white-space: pre-wrap;">{{error.Birthday}}</span>
                </div>
            </div>

            <div class="row mt-4 justify-content-center">
                <label asp-for="PhoneNumber" class="col-4 col-md-2"></label>
                <div class="col-6" style="padding:0px;">
                    <input id="PhoneNumber" name="PhoneNumber" v-model="form.PhoneNumber" type="tel" style="width:100%;" />
                    <span class="text-danger" style="white-space: pre-wrap;">{{error.PhoneNumber}}</span>
                </div>
            </div>

            <div class="row mt-5 justify-content-center">
                <button class="col-4 col-md-2 btn btn-outline-secondary border-0 bg-pink text-white" type="button" id="btnSuscribe" v-on:click="RegisterPost">確定送出</button>
            </div>
        </div>
        <!-- 初次登入設定資料 ends -->
    </div>
</div>

@section Scripts {
    <script>
        var RegisterApp = new Vue({
            el: '#Register',
            data: {
                form: {
                    Email: '',
                    Password: '',
                    PasswordConfirmed: '',
                    UserName: '',
                    Name: '',
                    Birthday: '',
                    PhoneNumber: ''
                },
                error: {
                    Email: '',
                    Password: '',
                    PasswordConfirmed: '',
                    UserName: '',
                    Name: '',
                    Birthday: '',
                    PhoneNumber: ''
                },
                currentInputField: '',
                inputed: false
            },
            computed: {
                getEmail: function() {
                    return this.form.Email;
                },
                getPassword: function() {
                    return this.form.Password;
                },
                getPasswordConfirmed: function() {
                    return this.form.PasswordConfirmed;
                },
                getUserName: function(newQuestion, oldQuestion) {
                    return this.form.UserName;
                },
                getName: function(newQuestion, oldQuestion) {
                    return this.form.Name;
                },
                getBirthday: function(newQuestion, oldQuestion) {
                    return this.form.Birthday;
                },
                getPhoneNumber: function(newQuestion, oldQuestion) {
                    return this.form.PhoneNumber;
                }
            },
            watch: {
                getEmail: function(newQuestion, oldQuestion) {
                    this.inputed = true;
                    this.currentInputField = 'Email';
                    this.debouncedCheckInput();
                },
                getPassword: function(newQuestion, oldQuestion) {
                    this.inputed = true;
                    this.currentInputField = 'Password';
                    this.debouncedCheckInput();
                },
                getPasswordConfirmed: function(newQuestion, oldQuestion) {
                    this.inputed = true;
                    this.currentInputField = 'PasswordConfirmed';
                    this.debouncedCheckInput();
                },
                getUserName: function(newQuestion, oldQuestion) {
                    this.inputed = true;
                    this.currentInputField = 'UserName';
                    this.debouncedCheckInput();
                },
                getName: function(newQuestion, oldQuestion) {
                    this.inputed = true;
                    this.currentInputField = 'Name';
                    this.debouncedCheckInput();
                },
                getBirthday: function(newQuestion, oldQuestion) {
                    this.inputed = true;
                    this.currentInputField = 'Birthday';
                    this.debouncedCheckInput();
                },
                getPhoneNumber: function(newQuestion, oldQuestion) {
                    this.inputed = true;
                    this.currentInputField = 'PhoneNumber';
                    this.debouncedCheckInput();
                }
            },
            created: function() {
                // `_.debounce` 是一个通过 Lodash 限制操作频率的函数。
                // 在这个例子中，我们希望限制访问 yesno.wtf/api 的频率
                // AJAX 请求直到用户输入完毕才会发出。想要了解更多关于
                // `_.debounce` 函数 (及其近亲 `_.throttle`) 的知识，
                // 请参考：https://lodash.com/docs#debounce
                this.debouncedCheckInput = _.debounce(this.CheckInput, 500);
            },
            methods: {
                RegisterPost: function() {

                    for (let key in this.error) {
                        this.error[key] = '';
                    }

                    axios.post('/Login/api/Register', this.form)
                        .then((response) => {
                            //console.log(response);
                            location.href = '/Login/Index';
                        })
                        .catch((error) => {
                            //console.log(error);

                            if (error.response.status === 400) {
                                let errorObj = error.response.data.errors;
                                //console.log(errorObj);

                                for (let key in errorObj) {
                                    this.error[key] = errorObj[key].join('\n');
                                }

                                //console.log(this.error);
                            }
                        });
                },
                CheckInput: function() {
                    //當使用者輸入某個欄位時，會即時驗證輸入的值是否有符合規範
                    axios.post('/Login/api/CheckInput', this.form)
                        .then((response) => {
                            //console.log(response);
                        })
                        .catch((error) => {
                            //console.log(error);

                            if (error.response.status === 400) {
                                let errorObj = error.response.data.errors;
                                if (errorObj[this.currentInputField] != undefined) {
                                    this.error[this.currentInputField] = errorObj[this.currentInputField].join('\n');
                                }
                                else {
                                    this.error[this.currentInputField] = '';
                                }

                                //console.log(this.error);
                            }
                        });
                }
            }
        });

        //當使用者已輸入資料尚未儲存變更，卻離開或重整視窗時，就會跳出以下警告
        window.onbeforeunload = function() {
            if (RegisterApp.inputed) {
                window.event.returnValue = '您輸入的資料尚未儲存，是否要離開此畫面';
                if (window.event.reason == false) {
                    window.event.stopPropagation();
                }
            }
        }

    </script>
}