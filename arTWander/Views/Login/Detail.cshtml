@model arTWander.Models.Dtos.RegisterUser
@{
    Layout = "~/Views/Shared/_LoginLayout.cshtml";
}

<div class="container">
    <!-- 歡迎 starts -->
    <ul class="nav nav-tabs d-flex justify-content-center border-bottom-0 px-0" id="myTab" role="tablist">
        <div class="row w-100 justify-content-center">
            <h4>感謝您的註冊，</h4>
            <h4>請讓我們更加了解您</h4>
        </div>
    </ul>
    <!-- 歡迎 ends -->
    <div class="tab-content" id="Register">
        <!-- 初次登入設定資料 starts -->
        <form method="post" action="Register" class="container p-0 w-100 rounded-lg mt-5 ">
            @Html.AntiForgeryToken()

            @*<div class="row mt-5 justify-content-center ">
            <!-- <label class="col-7 col-md-2 " for="userAvatar">頭像</label> -->
            <!-- 消除input type="file" UI的方法 https://www.wfublog.com/2017/10/input-type-file-upload-css-skill.html -->
            <label class=" col-3 col-md-1 p-0" for="Picture" role="button">
            <div id="userAvatarDiv">
            <img id="userAvatarImg" class="rounded-circle d-flex " width="100px" height="100px" src="/default.png" style="object-fit: cover;" alt="">
            <i class="fa fa-camera " aria-hidden="true"></i>
            <div id="fakeDiv"></div>
            </div>
            <input class="d-none" name="Picture" id="Picture" type="file">
            </label><br>
            </div>*@
            <div class="row mt-4 justify-content-center ">
                <label asp-for="Email" class="col-4 col-md-2"></label>
                <input asp-for="Email" v-model="email.data" class="col-6" />
            </div>
            <div class="row justify-content-center ">
                <label class="col-4 col-md-2"></label>
                <span asp-validation-for="Email" class="text-danger col-6" style="padding:0px" v-bind:class="{'field-validation-error':email.error,'field-validation-valid':!email.error}">{{email.errorMsg}}</span>
            </div>

            <div class="row mt-4 justify-content-center ">
                <label asp-for="Password" class="col-4 col-md-2"></label>
                <input asp-for="Password" v-model="password.data" class="col-6" type="password" />
            </div>
            <div class="row justify-content-center ">
                <label class="col-4 col-md-2"></label>
                <span asp-validation-for="Password" class="text-danger col-6" style="padding:0px" v-bind:class="{'field-validation-error':password.error,'field-validation-valid':!password.error}">{{password.errorMsg}}</span>
            </div>

            <div class="row mt-4 justify-content-center ">
                <label asp-for="PasswordConfirmed" class="col-4 col-md-2"></label>
                <input asp-for="PasswordConfirmed" v-model="passwordConfirmed.data" class="col-6" type="password" />
            </div>
            <div class="row justify-content-center ">
                <label class="col-4 col-md-2"></label>
                <span asp-validation-for="PasswordConfirmed" class="text-danger col-6" v-bind:class="{'field-validation-error':passwordConfirmed.error,'field-validation-valid':!passwordConfirmed.error}" style="padding:0px">{{passwordConfirmed.errorMsg}}</span>
            </div>

            <div class="row mt-4 justify-content-center ">
                <label asp-for="UserName" class="col-4 col-md-2"></label>
                <input asp-for="UserName" class="col-6" />
            </div>
            <div class="row justify-content-center ">
                <label class="col-4 col-md-2"></label>
                <span asp-validation-for="UserName" class="text-danger col-6" style="padding:0px"></span>
            </div>

            <div class="row mt-4 justify-content-center ">
                <label asp-for="Name" class="col-4 col-md-2"></label>
                <input asp-for="Name" class="col-6" />
            </div>
            <div class="row justify-content-center ">
                <label class="col-4 col-md-2"></label>
                <span asp-validation-for="Name" class="text-danger col-6" style="padding:0px"></span>
            </div>

            <div class="row mt-4 justify-content-center">
                <label asp-for="Birthday" class="col-4 col-md-2"></label>
                <input asp-for="Birthday" class="col-6" type="date" />
            </div>
            <div class="row justify-content-center ">
                <label class="col-4 col-md-2"></label>
                <span asp-validation-for="Birthday" class="text-danger col-6" style="padding:0px"></span>
            </div>

            <div class="row mt-4 justify-content-center">
                <label asp-for="PhoneNumber" class="col-4 col-md-2"></label>
                <input asp-for="PhoneNumber" class="col-6" />
            </div>
            <div class="row justify-content-center ">
                <label class="col-4 col-md-2"></label>
                <span asp-validation-for="PhoneNumber" class="text-danger col-6" style="padding:0px"></span>
            </div>

            <div class="row mt-5 justify-content-center">
                <button class="col-4 col-md-2 btn btn-outline-secondary border-0 bg-pink text-white" type="submit" id="btnSuscribe">儲存修改</button>
            </div>
        </form>
        <!-- 初次登入設定資料 ends -->
    </div>
</div>

@section Scripts {
    <script>
        var RegisterApp = new Vue({
            el: '#Register',
            data: {
                email: { data: '', error: false, errorMsg: '' },
                password: { data: '', error: false, errorMsg: '' },
                passwordConfirmed: { data: '', error: false, errorMsg: '' }
            },
            computed: {
                getEmail: function() {
                    return this.email.data;
                },
                getPassword: function() {
                    return this.password.data;
                },
                getPasswordConfirmed: function() {
                    return this.passwordConfirmed.data;
                }
            },
            watch: {// 如果 `email` 发生改变，这个函数就会运行
                getEmail: function(newQuestion, oldQuestion) {
                    this.debouncedGetEmail();
                },
                getPassword: function(newQuestion, oldQuestion) {
                    this.pwdCompare();
                    this.debouncedGetPassword();
                },
                getPasswordConfirmed: function(newQuestion, oldQuestion) {
                    this.pwdCompare();
                }
            },
            created: function() {
                // `_.debounce` 是一个通过 Lodash 限制操作频率的函数。
                // 在这个例子中，我们希望限制访问 yesno.wtf/api 的频率
                // AJAX 请求直到用户输入完毕才会发出。想要了解更多关于
                // `_.debounce` 函数 (及其近亲 `_.throttle`) 的知识，
                // 请参考：https://lodash.com/docs#debounce
                this.debouncedGetEmail = _.debounce(this.CheckEmail, 500);
                this.debouncedGetPassword = _.debounce(this.CheckPassword, 500);
            },
            methods: {
                pwdCompare: function() {
                    if (this.password.data != this.passwordConfirmed.data) {
                        this.passwordConfirmed.error = true;
                        this.passwordConfirmed.errorMsg = '與輸入的密碼不一致';
                    }
                    else {
                        this.passwordConfirmed.error = false;
                        this.passwordConfirmed.errorMsg = '';
                    }
                },
                CheckEmail: function() {
                    axios.get(`/Login/api/CheckEmail?Email=${this.email.data}`)
                        .then((response) => {
                            console.log(response);
                            let errorMsg = response.data;

                            if (errorMsg != '') {
                                this.email.error = true;
                                this.email.errorMsg = errorMsg;
                            }
                            else {
                                this.email.error = false;
                                this.email.errorMsg = '';
                            }
                        })
                        .catch((error) => console.log(error));
                },
                CheckPassword: function() {
                    axios.get(`/Login/api/CheckPassword?Password=${this.password.data}`)
                        .then((response) => {
                            console.log(response);
                            let errorMsg = response.data;

                            if (errorMsg != '') {
                                this.password.error = true;
                                this.password.errorMsg = errorMsg;
                            }
                            else {
                                this.password.error = false;
                                this.password.errorMsg = '';
                            }
                        })
                        .catch((error) => console.log(error));
                }
            }
        });
    </script>
}